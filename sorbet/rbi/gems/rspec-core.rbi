# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-core/all/rspec-core.rbi
#
# rspec-core-2.14.7
module RSpec
  def self.clear_remaining_example_groups; end
  def self.configuration; end
  def self.configuration=(new_configuration); end
  def self.configure; end
  def self.const_missing(name); end
  def self.reset; end
  def self.wants_to_quit; end
  def self.wants_to_quit=(maybe); end
  def self.windows_os?; end
  def self.world; end
  def self.world=(new_world); end
  extend RSpec::Core::Deprecation
end
module RSpec::Core
end
class RSpec::Core::FilterManager
  def add_location(file_path, line_numbers); end
  def already_set_standalone_filter?; end
  def empty?; end
  def exclude!(*args); end
  def exclude(*args); end
  def exclude?(example); end
  def exclude_with_low_priority(*args); end
  def exclusions; end
  def include!(*args); end
  def include(*args); end
  def include?(example); end
  def include_with_low_priority(*args); end
  def inclusions; end
  def initialize; end
  def is_standalone_filter?(filter); end
  def merge(orig, opposite, *updates); end
  def prune(examples); end
  def replace(orig, opposite, *updates); end
  def reverse_merge(orig, opposite, *updates); end
  def unless_standalone(*args); end
end
module RSpec::Core::FilterManager::Describable
  def description; end
  def empty_without_conditional_filters?; end
end
module RSpec::Core::FilterManager::BackwardCompatibility
  def _warn_deprecated_key(key, updates); end
  def _warn_deprecated_keys(updates); end
  def merge(orig, opposite, *updates); end
  def reverse_merge(orig, opposite, *updates); end
end
module RSpec::Core::DSL
  def describe(*args, &example_group_block); end
end
class Module
  include RSpec::Core::DSL
  include RSpec::Core::SharedExampleGroup::TopLevelDSL
end
module Kernel
  def debugger(*args); end
end
module RSpec::Core::Extensions
end
module RSpec::Core::Extensions::InstanceEvalWithArgs
  def instance_eval_with_args(*args, &block); end
end
module RSpec::Core::Extensions::ModuleEvalWithArgs
  def module_eval_with_args(*args, &block); end
  include RSpec::Core::Extensions::InstanceEvalWithArgs
end
module RSpec::Core::Extensions::Ordered
end
module RSpec::Core::Extensions::Ordered::ExampleGroups
  def ordered; end
end
module RSpec::Core::Extensions::Ordered::Examples
  def ordered; end
end
module RSpec::Core::Deprecation
  def deprecate(deprecated, replacement_or_hash = nil, ignore_version = nil); end
  def warn_deprecation(message); end
end
module RSpec::Core::ConstMissing
  def const_missing(name); end
end
module RSpec::Runner
  def self.configure(&block); end
end
module RSpec::Rake
  def self.const_missing(name); end
end
class Object < BasicObject
  extend RSpec::Core::ConstMissing
end
class RSpec::Core::Reporter
  def abort(seed); end
  def deprecation(message); end
  def example_failed(example); end
  def example_group_finished(group); end
  def example_group_started(group); end
  def example_passed(example); end
  def example_pending(example); end
  def example_started(example); end
  def finish(seed); end
  def initialize(*formatters); end
  def message(message); end
  def notify(event, *args, &block); end
  def register_listener(listener, *notifications); end
  def registered_listeners(notification); end
  def report(expected_example_count, seed = nil); end
  def start(expected_example_count); end
  def stop; end
end
module RSpec::Core::MetadataHashBuilder
end
module RSpec::Core::MetadataHashBuilder::Common
  def add_symbols_to_hash(hash, args); end
  def build_metadata_hash_from(args); end
  def warn_about_symbol_usage(args); end
end
module RSpec::Core::MetadataHashBuilder::WithConfigWarning
  def symbol_metadata_warning(symbols); end
  include RSpec::Core::MetadataHashBuilder::Common
end
module RSpec::Core::MetadataHashBuilder::WithDeprecationWarning
  def symbol_metadata_warning(symbols); end
  include RSpec::Core::MetadataHashBuilder::Common
end
module RSpec::Core::Hooks
  def after(*args, &block); end
  def after_all_hooks_for(group); end
  def after_each_hooks_for(example); end
  def append_after(*args, &block); end
  def append_before(*args, &block); end
  def around(*args, &block); end
  def around_each_hooks_for(example, initial_procsy = nil); end
  def before(*args, &block); end
  def before_all_hooks_for(group); end
  def before_each_hooks_for(example); end
  def extract_scope_from(args); end
  def find_hook(hook, scope, example_or_group, initial_procsy); end
  def hooks; end
  def prepend_after(*args, &block); end
  def prepend_before(*args, &block); end
  def register_hook(prepend_or_append, hook, *args, &block); end
  def run_hook(hook, scope, example_or_group = nil, initial_procsy = nil); end
  def scope_and_options_from(*args); end
  include RSpec::Core::MetadataHashBuilder::WithConfigWarning
end
class RSpec::Core::Hooks::Hook
  def block; end
  def initialize(block, options); end
  def options; end
  def options_apply?(example_or_group); end
end
class RSpec::Core::Hooks::BeforeHook < RSpec::Core::Hooks::Hook
  def display_name; end
  def run(example); end
end
class RSpec::Core::Hooks::AfterHook < RSpec::Core::Hooks::Hook
  def display_name; end
  def run(example); end
end
class RSpec::Core::Hooks::AfterAllHook < RSpec::Core::Hooks::Hook
  def display_name; end
  def run(example); end
end
class RSpec::Core::Hooks::AroundHook < RSpec::Core::Hooks::Hook
  def display_name; end
end
module RSpec::Core::Hooks::HookCollectionAliases
  def self.included(host); end
end
class RSpec::Core::Hooks::HookCollection < Array
  def append(*arg0); end
  def for(example_or_group); end
  def prepend(*arg0); end
  def run; end
  def with(example); end
  include RSpec::Core::Hooks::HookCollectionAliases
end
class RSpec::Core::Hooks::AroundHookCollection < Array
  def append(*arg0); end
  def for(example, initial_procsy = nil); end
  def prepend(*arg0); end
  def run; end
  def with(example, initial_procsy); end
  include RSpec::Core::Hooks::HookCollectionAliases
end
class RSpec::Core::Hooks::GroupHookCollection < Array
  def for(group); end
  def run; end
end
module RSpec::Core::Hooks::RegistersGlobals
  def process(host, globals, position, scope); end
  def register_globals(host, globals); end
end
module RSpec::Core::MemoizedHelpers
  def __memoized; end
  def self.define_helpers_on(example_group); end
  def self.get_constant_or_yield(example_group, name); end
  def self.included(mod); end
  def self.module_for(example_group); end
  def should(matcher = nil, message = nil); end
  def should_not(matcher = nil, message = nil); end
  def subject; end
end
class RSpec::Core::MemoizedHelpers::BeforeAllMemoizedHash
  def []=(key, value); end
  def fetch(key, &block); end
  def initialize(example_group_instance); end
  def preserve_accessed_lets; end
  def self.isolate_for_before_all(example_group_instance); end
end
module RSpec::Core::MemoizedHelpers::ClassMethods
  def its(attribute, &block); end
  def let!(name, &block); end
  def let(name, &block); end
  def subject!(name = nil, &block); end
  def subject(name = nil, &block); end
end
class RSpec::Core::Metadata < Hash
  def all_apply?(filters); end
  def any_apply?(filters); end
  def configure_for_example(description, user_metadata); end
  def ensure_valid_keys(user_metadata); end
  def example_group_declaration_line(locations); end
  def filter_applies?(key, value, metadata = nil); end
  def filter_applies_to_any_value?(key, value); end
  def filters_apply?(key, value); end
  def for_example(description, user_metadata); end
  def initialize(parent_group_metadata = nil); end
  def line_number_filter_applies?(line_numbers); end
  def location_filter_applies?(locations); end
  def process(*args); end
  def relevant_line_numbers(metadata = nil); end
  def self.relative_path(line); end
end
module RSpec::Core::Metadata::MetadataHash
  def [](key); end
  def build_description_from(first_part = nil, *parts); end
  def fetch(key, *args); end
  def file_and_line_number; end
  def first_caller_from_outside_rspec; end
  def location; end
  def method_description_after_module?(parent_part, child_part); end
  def store_computed(key); end
end
module RSpec::Core::Metadata::ExampleMetadataHash
  def described_class; end
  def full_description; end
  include RSpec::Core::Metadata::MetadataHash
end
module RSpec::Core::Metadata::GroupMetadataHash
  def container_stack; end
  def described_class; end
  def full_description; end
  include RSpec::Core::Metadata::MetadataHash
end
module RSpec::Core::Pending
  def pending(*args); end
end
class RSpec::Core::Pending::PendingDeclaredInExample < StandardError
end
class RSpec::Core::Pending::PendingExampleFixedError < StandardError
end
module RSpec::Core::Formatters
end
class RSpec::Core::World
  def announce_exclusion_filter(announcements); end
  def announce_filters; end
  def announce_inclusion_filter(announcements); end
  def configure_group(group); end
  def declaration_line_numbers; end
  def everything_filtered_message; end
  def example_count; end
  def example_groups; end
  def exclusion_filter; end
  def filter_manager; end
  def filtered_examples; end
  def inclusion_filter; end
  def initialize(configuration = nil); end
  def preceding_declaration_line(filter_line); end
  def register(example_group); end
  def reporter; end
  def reset; end
  def wants_to_quit; end
  def wants_to_quit=(arg0); end
  include RSpec::Core::Hooks
end
class RSpec::Core::BacktraceCleaner
  def exclude?(line); end
  def exclusion_patterns; end
  def exclusion_patterns=(arg0); end
  def full_backtrace=(true_or_false); end
  def full_backtrace?; end
  def inclusion_patterns; end
  def inclusion_patterns=(arg0); end
  def initialize(inclusion_patterns = nil, exclusion_patterns = nil); end
  def matches_an_exclusion_pattern?(line); end
end
module RSpec::Core::RubyProject
  def add_dir_to_load_path(dir); end
  def add_to_load_path(*dirs); end
  def ascend_until; end
  def determine_root; end
  def find_first_parent_containing(dir); end
  def root; end
  def self.add_dir_to_load_path(dir); end
  def self.add_to_load_path(*dirs); end
  def self.ascend_until; end
  def self.determine_root; end
  def self.find_first_parent_containing(dir); end
  def self.root; end
end
class RSpec::Core::Formatters::DeprecationFormatter
  def deprecation(data); end
  def deprecation_summary; end
  def initialize(deprecation_stream = nil, summary_stream = nil); end
  def start(example_count = nil); end
end
class RSpec::Core::Configuration
  def add_formatter(formatter_to_use, *paths); end
  def add_setting(name, opts = nil); end
  def alias_example_to(new_name, *args); end
  def alias_it_behaves_like_to(new_name, report_label = nil); end
  def alias_it_should_behave_like_to(new_name, report_label = nil); end
  def assert_no_example_groups_defined(config_option); end
  def backtrace_clean_patterns; end
  def backtrace_clean_patterns=(patterns); end
  def backtrace_cleaner; end
  def backtrace_exclusion_patterns; end
  def backtrace_exclusion_patterns=(patterns); end
  def backtrace_inclusion_patterns; end
  def backtrace_inclusion_patterns=(patterns); end
  def built_in_formatter(key); end
  def built_in_orderer?(block); end
  def color(output = nil); end
  def color=(bool); end
  def color?(output = nil); end
  def color_enabled(output = nil); end
  def color_enabled=(bool); end
  def color_enabled?(output = nil); end
  def command; end
  def configure_expectation_framework; end
  def configure_group(group); end
  def configure_mock_framework; end
  def custom_formatter(formatter_ref); end
  def debug=(bool); end
  def debug?; end
  def default_color; end
  def default_color=(arg0); end
  def default_color?; end
  def default_path; end
  def default_path=(arg0); end
  def default_path?; end
  def deprecation_stream; end
  def deprecation_stream=(arg0); end
  def deprecation_stream?; end
  def detail_color; end
  def detail_color=(arg0); end
  def detail_color?; end
  def drb; end
  def drb=(arg0); end
  def drb?; end
  def drb_port; end
  def drb_port=(arg0); end
  def drb_port?; end
  def error_stream; end
  def error_stream=(arg0); end
  def error_stream?; end
  def example_ordering_block; end
  def exclusion_filter; end
  def exclusion_filter=(filter); end
  def expect_with(*frameworks); end
  def expectation_framework=(framework); end
  def expectation_frameworks; end
  def expecting_with_rspec; end
  def expecting_with_rspec=(arg0); end
  def expecting_with_rspec?; end
  def extend(mod, *filters); end
  def extract_location(path); end
  def fail_fast; end
  def fail_fast=(arg0); end
  def fail_fast?; end
  def failure_color; end
  def failure_color=(arg0); end
  def failure_color?; end
  def failure_exit_code; end
  def failure_exit_code=(arg0); end
  def failure_exit_code?; end
  def file_at(path); end
  def filename_pattern; end
  def filename_pattern=(arg0); end
  def filename_pattern?; end
  def files_or_directories_to_run=(*files); end
  def files_to_run; end
  def files_to_run=(arg0); end
  def files_to_run?; end
  def filter; end
  def filter=(filter); end
  def filter_manager; end
  def filter_manager=(arg0); end
  def filter_run(*args); end
  def filter_run_excluding(*args); end
  def filter_run_including(*args); end
  def fixed_color; end
  def fixed_color=(arg0); end
  def fixed_color?; end
  def force(hash); end
  def format_docstrings(&block); end
  def format_docstrings_block; end
  def formatter=(formatter_to_use, *paths); end
  def formatters; end
  def full_backtrace=(true_or_false); end
  def full_backtrace?; end
  def full_description; end
  def full_description=(description); end
  def gather_directories(path); end
  def get_files_to_run(paths); end
  def group_ordering_block; end
  def include(mod, *filters); end
  def include_or_extend_modules; end
  def include_or_extend_modules=(arg0); end
  def include_or_extend_modules?; end
  def inclusion_filter; end
  def inclusion_filter=(filter); end
  def initialize; end
  def libs; end
  def libs=(libs); end
  def line_numbers; end
  def line_numbers=(line_numbers); end
  def load_spec_files; end
  def mock_framework; end
  def mock_framework=(framework); end
  def mock_with(framework); end
  def order; end
  def order=(type); end
  def order_and_seed_from_order(type); end
  def order_and_seed_from_seed(value); end
  def order_examples(&block); end
  def order_groups(&block); end
  def order_groups_and_examples(&block); end
  def out; end
  def out=(arg0); end
  def out?; end
  def output; end
  def output=(arg0); end
  def output?; end
  def output_stream; end
  def output_stream=(arg0); end
  def output_stream?; end
  def output_to_tty?(output = nil); end
  def path_for(const_ref); end
  def pattern; end
  def pattern=(arg0); end
  def pattern?; end
  def pending_color; end
  def pending_color=(arg0); end
  def pending_color?; end
  def profile_examples; end
  def profile_examples=(arg0); end
  def profile_examples?; end
  def raise_if_rspec_1_is_loaded; end
  def randomize?; end
  def reporter; end
  def requires; end
  def requires=(paths); end
  def reset; end
  def run_all_when_everything_filtered; end
  def run_all_when_everything_filtered=(arg0); end
  def run_all_when_everything_filtered?; end
  def safe_extend(mod, host); end
  def safe_include(mod, host); end
  def seed; end
  def seed=(seed); end
  def self.add_setting(name, opts = nil); end
  def self.define_aliases(name, alias_name); end
  def self.define_predicate_for(*names); end
  def self.define_reader(name); end
  def self.deprecate_alias_key; end
  def set_order_and_seed(hash); end
  def setup_load_path_and_require(paths); end
  def show_failures_in_pending_blocks; end
  def show_failures_in_pending_blocks=(arg0); end
  def show_failures_in_pending_blocks?; end
  def string_const?(str); end
  def success_color; end
  def success_color=(arg0); end
  def success_color?; end
  def treat_symbols_as_metadata_keys_with_true_values; end
  def treat_symbols_as_metadata_keys_with_true_values=(arg0); end
  def treat_symbols_as_metadata_keys_with_true_values?; end
  def tty; end
  def tty=(arg0); end
  def tty?; end
  def underscore(camel_cased_word); end
  def underscore_with_fix_for_non_standard_rspec_naming(string); end
  def value_for(key, default = nil); end
  def warnings; end
  def warnings=(value); end
  include RSpec::Core::Hooks
end
class RSpec::Core::Configuration::MustBeConfiguredBeforeExampleGroupsError < StandardError
end
class RSpec::Core::ProjectInitializer
  def create_dot_rspec_file; end
  def create_spec_helper_file; end
  def delete_if_confirmed(path, message); end
  def initialize(arg = nil); end
  def report_creating(file); end
  def report_exists(file); end
  def run; end
end
class RSpec::Core::Parser
  def convert_deprecated_args(args); end
  def parse!(args); end
  def parse(args); end
  def parser(options); end
  def self.parse!(args); end
  def self.parse(args); end
end
class RSpec::Core::ConfigurationOptions
  def all_configs; end
  def args_from_options_file(path); end
  def command_line_options; end
  def configure(config); end
  def custom_options; end
  def custom_options_file; end
  def drb_argv; end
  def env_options; end
  def extract_filters_from(*configs); end
  def file_options; end
  def filter_manager; end
  def force?(key); end
  def global_options; end
  def global_options_file; end
  def initialize(args); end
  def load_formatters_into(config); end
  def local_options; end
  def local_options_file; end
  def options; end
  def options_file_as_erb_string(path); end
  def options_from(path); end
  def order(keys, *ordered); end
  def parse_options; end
  def process_options_into(config); end
  def project_options; end
  def project_options_file; end
end
class RSpec::Core::CommandLine
  def initialize(options, configuration = nil, world = nil); end
  def run(err, out); end
end
class RSpec::Core::Runner
  def self.autorun; end
  def self.autorun_disabled?; end
  def self.disable_autorun!; end
  def self.installed_at_exit?; end
  def self.run(args, err = nil, out = nil); end
  def self.running_in_drb?; end
  def self.trap_interrupt; end
end
class RSpec::Core::Example
  def all_apply?(filters); end
  def any_apply?(filters); end
  def around_each_hooks; end
  def assign_generated_description; end
  def description; end
  def example_group; end
  def example_group_instance; end
  def exception; end
  def execution_result; end
  def fail_with_exception(reporter, exception); end
  def file_path; end
  def finish(reporter); end
  def full_description; end
  def initialize(example_group_class, description, metadata, example_block = nil); end
  def instance_eval(*args, &block); end
  def instance_eval_with_args(*args, &block); end
  def instance_eval_with_rescue(context = nil, &block); end
  def location; end
  def metadata; end
  def options; end
  def pending; end
  def pending?; end
  def record(results = nil); end
  def record_finished(status, results = nil); end
  def run(example_group_instance, reporter); end
  def run_after_each; end
  def run_before_each; end
  def self.delegate_to_metadata(*keys); end
  def self.procsy(metadata, &proc); end
  def set_exception(exception, context = nil); end
  def start(reporter); end
  def verify_mocks; end
  def with_around_each_hooks(&block); end
end
module RSpec::Core::Example::Procsy
  def metadata; end
  def self.extended(proc); end
  def with(metadata); end
end
module RSpec::Core::SharedExampleGroup
  def self.registry; end
  def share_as(name, &block); end
  def share_examples_for(*args, &block); end
  def shared_context(*args, &block); end
  def shared_example_groups; end
  def shared_examples(*args, &block); end
  def shared_examples_for(*args, &block); end
end
class RSpec::Core::SharedExampleGroup::Collection
  def [](key); end
  def fetch_anyway(key); end
  def fetch_examples(key); end
  def initialize(sources, examples); end
  def source_for(key); end
  def warn_deprecation_and_fetch_anyway(key); end
end
module RSpec::Core::SharedExampleGroup::TopLevelDSL
  def share_as(name, &block); end
  def share_examples_for(*args, &block); end
  def shared_context(*args, &block); end
  def shared_example_groups; end
  def shared_examples(*args, &block); end
  def shared_examples_for(*args, &block); end
end
class RSpec::Core::SharedExampleGroup::Registry
  def add_const(source, name, &block); end
  def add_group(source, *args, &block); end
  def add_shared_example_group(source, key, block); end
  def clear; end
  def ensure_block_has_source_location(block, caller_line); end
  def example_block_for(source, key); end
  def formatted_location(block); end
  def key?(candidate); end
  def raise_name_error; end
  def shared_example_groups; end
  def shared_example_groups_for(*sources); end
  def warn_if_key_taken(source, key, new_block); end
end
class RSpec::Core::ExampleGroup
  def described_class; end
  def example; end
  def example=(arg0); end
  def instance_eval_with_rescue(context = nil, &hook); end
  def running_example; end
  def self.alias_example_to(name, extra = nil); end
  def self.alias_it_behaves_like_to(name, *args, &block); end
  def self.all_apply?(filters); end
  def self.any_apply?(filters); end
  def self.assign_before_all_ivars(ivars, example_group_instance); end
  def self.before_all_ivars; end
  def self.children; end
  def self.context(*args, &example_group_block); end
  def self.declaration_line_numbers; end
  def self.descendant_filtered_examples; end
  def self.descendants; end
  def self.describe(*args, &example_group_block); end
  def self.described_class; end
  def self.describes; end
  def self.description; end
  def self.display_name; end
  def self.ensure_example_groups_are_configured; end
  def self.example(desc = nil, *args, &block); end
  def self.examples; end
  def self.fail_fast?; end
  def self.fail_filtered_examples(exception, reporter); end
  def self.file_path; end
  def self.filtered_examples; end
  def self.find_and_eval_shared(label, name, *args, &customization_block); end
  def self.fit(desc = nil, *args, &block); end
  def self.focus(desc = nil, *args, &block); end
  def self.focused(desc = nil, *args, &block); end
  def self.include_context(name, *args, &block); end
  def self.include_examples(name, *args, &block); end
  def self.it(desc = nil, *args, &block); end
  def self.it_behaves_like(name, *args, &customization_block); end
  def self.it_should_behave_like(name, *args, &customization_block); end
  def self.metadata; end
  def self.parent_groups; end
  def self.pending(desc = nil, *args, &block); end
  def self.register; end
  def self.run(reporter); end
  def self.run_after_all_hooks(example_group_instance); end
  def self.run_after_each_hooks(example); end
  def self.run_around_each_hooks(example, initial_procsy); end
  def self.run_before_all_hooks(example_group_instance); end
  def self.run_before_each_hooks(example); end
  def self.run_examples(reporter); end
  def self.set_it_up(*args); end
  def self.set_ivars(instance, ivars); end
  def self.specify(desc = nil, *args, &block); end
  def self.store_before_all_ivars(example_group_instance); end
  def self.subclass(parent, args, &example_group_block); end
  def self.superclass_metadata; end
  def self.top_level?; end
  def self.top_level_description; end
  def self.world; end
  def self.xexample(desc = nil, *args, &block); end
  def self.xit(desc = nil, *args, &block); end
  def self.xspecify(desc = nil, *args, &block); end
  extend RSpec::Core::Extensions::ModuleEvalWithArgs
  extend RSpec::Core::Hooks
  extend RSpec::Core::MemoizedHelpers::ClassMethods
  extend RSpec::Core::MetadataHashBuilder::WithDeprecationWarning
  extend RSpec::Core::SharedExampleGroup
  include RSpec::Core::Extensions::InstanceEvalWithArgs
  include RSpec::Core::MemoizedHelpers
  include RSpec::Core::Pending
  include RSpec::Core::SharedExampleGroup
end
module RSpec::Core::Version
end
class RSpec::Core::Time
  def self.now; end
end
module RSpec::Core::MockFrameworkAdapter
  def self.configuration; end
  def self.framework_name; end
  def setup_mocks_for_rspec; end
  def teardown_mocks_for_rspec; end
  def verify_mocks_for_rspec; end
end

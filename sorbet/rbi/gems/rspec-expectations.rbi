# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strong
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rspec-expectations/all/rspec-expectations.rbi
#
# rspec-expectations-2.14.5
class Array
end
module RSpec
end
module RSpec::Expectations
  def differ=(ignore); end
  def self.all_strings?(*args); end
  def self.any_multiline_strings?(*args); end
  def self.coerce_to_string(string_or_array); end
  def self.diffably_stringify(array); end
  def self.differ; end
  def self.fail_with(message, expected = nil, actual = nil); end
  def self.method_handle_for(object, method_name); end
  def self.multiline?(string); end
  def self.no_numbers?(*args); end
  def self.no_procs?(*args); end
end
module RSpec::Expectations::DeprecatedConstants
  def const_missing(name); end
end
module RSpec::Matchers
  def be(*args); end
  def be_a(klass); end
  def be_a_kind_of(expected); end
  def be_an(klass); end
  def be_an_instance_of(expected); end
  def be_close(expected, delta); end
  def be_false; end
  def be_instance_of(expected); end
  def be_kind_of(expected); end
  def be_nil; end
  def be_true; end
  def be_within(delta); end
  def change(receiver = nil, message = nil, &block); end
  def cover(*values); end
  def end_with(*expected); end
  def eq(expected); end
  def eql(expected); end
  def equal(expected); end
  def exist(*args); end
  def expect(*target, &target_block); end
  def have(n); end
  def have_at_least(n); end
  def have_at_most(n); end
  def have_exactly(n); end
  def include(*expected); end
  def match(expected); end
  def match_array(array); end
  def match_regex(expected); end
  def method_missing(method, *args, &block); end
  def raise_error(error = nil, message = nil, &block); end
  def raise_exception(error = nil, message = nil, &block); end
  def respond_to(*names); end
  def satisfy(&block); end
  def self.clear_generated_description; end
  def self.configuration; end
  def self.generated_description; end
  def self.is_a_matcher?(obj); end
  def self.last_description; end
  def self.last_matcher; end
  def self.last_matcher=(arg0); end
  def self.last_should; end
  def self.last_should=(arg0); end
  def start_with(*expected); end
  def throw_symbol(expected_symbol = nil, expected_arg = nil); end
  def yield_control; end
  def yield_successive_args(*args); end
  def yield_with_args(*args); end
  def yield_with_no_args; end
  extend RSpec::Matchers::DSL
end
module RSpec::Matchers::Extensions
end
module RSpec::Matchers::Extensions::InstanceEvalWithArgs
  def instance_eval_with_args(*args, &block); end
end
module RSpec::Matchers::Pretty
  def _pretty_print(array); end
  def expected_to_sentence; end
  def is_matcher_with_description?(object); end
  def name; end
  def name_to_sentence; end
  def split_words(sym); end
  def to_sentence(words); end
  def to_word(item); end
  def underscore(camel_cased_word); end
end
module RSpec::Matchers::BuiltIn
end
class RSpec::Matchers::BuiltIn::BaseMatcher
  def ==(other); end
  def actual; end
  def assert_ivars(*ivars); end
  def description; end
  def diffable?; end
  def expected; end
  def failure_message_for_should; end
  def failure_message_for_should_not; end
  def initialize(expected = nil); end
  def match_unless_raises(*exceptions); end
  def matches?(actual); end
  def rescued_exception; end
  include RSpec::Matchers::Pretty
end
module RSpec::Matchers::DSL
  def define(name, &declarations); end
  def matcher(name, &declarations); end
end
class RSpec::Matchers::DSL::Matcher
  def actual; end
  def cache(key, &block); end
  def cache_or_call_cached(key, &block); end
  def call_cached(key); end
  def chain(method, &block); end
  def default_description; end
  def default_failure_message_for_should; end
  def default_failure_message_for_should_not; end
  def define_method(name, &block); end
  def description(&block); end
  def diffable; end
  def diffable?; end
  def does_not_match?(actual); end
  def expected; end
  def failure_message_for_should(&block); end
  def failure_message_for_should_not(&block); end
  def for_expected(*expected); end
  def include(*args); end
  def initialize(name, &declarations); end
  def making_declared_methods_public; end
  def match(&block); end
  def match_for_should(&block); end
  def match_for_should_not(&block); end
  def match_unless_raises(exception = nil, &block); end
  def matcher_execution_context; end
  def matcher_execution_context=(arg0); end
  def matches?(actual); end
  def method_missing(method, *args, &block); end
  def rescued_exception; end
  def respond_to?(method, include_private = nil); end
  include RSpec::Matchers
  include RSpec::Matchers::Extensions::InstanceEvalWithArgs
  include RSpec::Matchers::Pretty
end
class RSpec::Matchers::OperatorMatcher
  def !=(expected); end
  def !~(expected); end
  def <(expected); end
  def <=(expected); end
  def ==(expected); end
  def ===(expected); end
  def =~(expected); end
  def >(expected); end
  def >=(expected); end
  def description; end
  def eval_match(actual, operator, expected); end
  def fail_with_message(message); end
  def initialize(actual); end
  def self.get(klass, operator); end
  def self.register(klass, operator, matcher); end
  def self.registry; end
  def self.unregister(klass, operator); end
  def self.use_custom_matcher_or_delegate(operator); end
  def uses_generic_implementation_of?(op); end
end
class RSpec::Matchers::BuiltIn::PositiveOperatorMatcher < RSpec::Matchers::OperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end
class RSpec::Matchers::BuiltIn::NegativeOperatorMatcher < RSpec::Matchers::OperatorMatcher
  def __delegate_operator(actual, operator, expected); end
end
class RSpec::Matchers::BuiltIn::MatchArray < RSpec::Matchers::BuiltIn::BaseMatcher
  def description; end
  def difference_between_arrays(array_1, array_2); end
  def failure_message_for_should; end
  def failure_message_for_should_not; end
  def match(expected, actual); end
  def safe_sort(array); end
end
class RSpec::Expectations::ExpectationTarget
  def initialize(target); end
  def not_to(matcher = nil, message = nil, &block); end
  def prevent_operator_matchers(verb, matcher); end
  def self.deprecated_should_enabled; end
  def self.deprecated_should_enabled=(arg0); end
  def self.deprecated_should_enabled?; end
  def self.disable_deprecated_should; end
  def self.enable_deprecated_should; end
  def should(*args); end
  def should_not(*args); end
  def to(matcher = nil, message = nil, &block); end
  def to_not(matcher = nil, message = nil, &block); end
end
module RSpec::Expectations::Syntax
  def default_should_host; end
  def disable_expect(syntax_host = nil); end
  def disable_should(syntax_host = nil); end
  def enable_expect(syntax_host = nil); end
  def enable_should(syntax_host = nil); end
  def expect_enabled?(syntax_host = nil); end
  def expression_generator; end
  def negative_expression(target_expression, matcher_expression); end
  def positive_expression(target_expression, matcher_expression); end
  def should_enabled?(syntax_host = nil); end
  extend RSpec::Expectations::Syntax
end
module RSpec::Expectations::Syntax::ShouldExpressionGenerator
  def self.negative_expression(target_expression, matcher_expression); end
  def self.positive_expression(target_expression, matcher_expression); end
end
module RSpec::Expectations::Syntax::ExpectExpressionGenerator
  def self.negative_expression(target_expression, matcher_expression); end
  def self.positive_expression(target_expression, matcher_expression); end
end
class RSpec::Matchers::Configuration
  def add_should_and_should_not_to(*modules); end
  def backtrace_formatter; end
  def backtrace_formatter=(arg0); end
  def color?; end
  def syntax; end
  def syntax=(values); end
end
module RSpec::Matchers::Configuration::NullBacktraceFormatter
  def self.format_backtrace(backtrace); end
end
class BasicObject
  def should(matcher = nil, message = nil, &block); end
  def should_not(matcher = nil, message = nil, &block); end
end
class RSpec::Expectations::ExpectationNotMetError < StandardError
end
module RSpec::Expectations::Deprecation
  def deprecate(deprecated, options = nil); end
end
class RSpec::Expectations::ExpectationHandler
  def self.check_message(msg); end
end
class RSpec::Expectations::PositiveExpectationHandler < RSpec::Expectations::ExpectationHandler
  def self.handle_matcher(actual, matcher, message = nil, &block); end
end
class RSpec::Expectations::NegativeExpectationHandler < RSpec::Expectations::ExpectationHandler
  def self.handle_matcher(actual, matcher, message = nil, &block); end
end
module RSpec::Expectations::Version
end
class RSpec::Expectations::Differ
  def blue(text); end
  def color(text, color_code); end
  def color_diff(diff); end
  def context_lines; end
  def diff_as_object(actual, expected); end
  def diff_as_string(input_data_new, input_data_old); end
  def format; end
  def green(text); end
  def matching_encoding(string, encoding); end
  def object_to_string(object); end
  def pick_encoding(source_a, source_b); end
  def red(text); end
end
